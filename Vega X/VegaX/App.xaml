<Application
	x:Class="VegaX.App" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:VegaX">
	<Application.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
				<ResourceDictionary
					Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<SolidColorBrush
				Color="White"
				x:Key="PrimaryHueLightBrush" />
			<SolidColorBrush
				Color="Black"
				x:Key="PrimaryHueLightForegroundBrush" />
			<SolidColorBrush
				Color="White"
				x:Key="PrimaryHueMidBrush" />
			<SolidColorBrush
				Color="Black"
				x:Key="PrimaryHueMidForegroundBrush" />
			<SolidColorBrush
				Color="White"
				x:Key="PrimaryHueDarkBrush" />
			<SolidColorBrush
				Color="Black"
				x:Key="PrimaryHueDarkForegroundBrush" />
			<SolidColorBrush
				Color="White"
				x:Key="SecondaryAccentBrush" />
			<SolidColorBrush
				Color="White"
				x:Key="SecondaryAccentForegroundBrush" />
			<SolidColorBrush
				Color="Transparent"
				x:Key="ScrollBar.Static.Background" />
			<SolidColorBrush
				Color="#ffffff"
				x:Key="ScrollBar.Pressed.Glyph" />
			<SolidColorBrush
				Color="#a0a0a0"
				x:Key="ScrollBar.MouseOver.Glyph" />
			<SolidColorBrush
				Color="#404040"
				x:Key="ScrollBar.Disabled.Glyph" />
			<SolidColorBrush
				Color="#808080"
				x:Key="ScrollBar.Static.Glyph" />
			<SolidColorBrush
				Color="#303030"
				x:Key="ScrollBar.MouseOver.Background" />
			<SolidColorBrush
				Color="#404040"
				x:Key="ScrollBar.Pressed.Background" />
			<SolidColorBrush
				Color="#191919"
				x:Key="ScrollBar.Disabled.Background" />
			<SolidColorBrush
				Color="#60ffffff"
				x:Key="ScrollBar.Static.Thumb" />
			<SolidColorBrush
				Color="#70ffffff"
				x:Key="ScrollBar.MouseOver.Thumb" />
			<SolidColorBrush
				Color="#80ffffff"
				x:Key="ScrollBar.Pressed.Thumb" />
			<Style
				TargetType="{x:Type RepeatButton}"
				x:Key="ScrollBarButton">
				<Setter
					Property="HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Padding"
					Value="1" />
				<Setter
					Property="Focusable"
					Value="False" />
				<Setter
					Property="IsTabStop"
					Value="False" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type RepeatButton}">
							<Border
								Name="border"
								SnapsToDevicePixels="True"
								Background="{StaticResource ScrollBar.Static.Background}">
								<ContentPresenter
									Name="contentPresenter"
									Focusable="False"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									Margin="{TemplateBinding Padding}"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="border"
										Property="Background"
										Value="{StaticResource ScrollBar.MouseOver.Background}" />
								</Trigger>
								<Trigger
									Property="IsPressed"
									Value="True">
									<Setter
										TargetName="border"
										Property="Background"
										Value="{StaticResource ScrollBar.Pressed.Background}" />
								</Trigger>
								<Trigger
									Property="IsEnabled"
									Value="False">
									<Setter
										TargetName="contentPresenter"
										Property="UIElement.Opacity"
										Value="0.56" />
									<Setter
										TargetName="border"
										Property="Background"
										Value="{StaticResource ScrollBar.Disabled.Background}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type RepeatButton}"
				x:Key="RepeatButtonTransparent">
				<Setter
					Property="FrameworkElement.OverridesDefaultStyle"
					Value="True" />
				<Setter
					Property="Background"
					Value="#00FFFFFF" />
				<Setter
					Property="Focusable"
					Value="False" />
				<Setter
					Property="IsTabStop"
					Value="False" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type RepeatButton}">
							<Rectangle
								Fill="{TemplateBinding Background}"
								Height="{TemplateBinding Height}"
								Width="{TemplateBinding Width}" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type Thumb}"
				x:Key="ScrollBarThumbVertical">
				<Setter
					Property="FrameworkElement.OverridesDefaultStyle"
					Value="True" />
				<Setter
					Property="IsTabStop"
					Value="False" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Thumb}">
							<Border
								Name="rectangle"
								CornerRadius="3"
								Height="{TemplateBinding Height}"
								SnapsToDevicePixels="True"
								Width="{TemplateBinding Width}"
								Background="{StaticResource ScrollBar.Static.Thumb}" />
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="rectangle"
										Property="Background"
										Value="{StaticResource ScrollBar.MouseOver.Thumb}" />
								</Trigger>
								<Trigger
									Property="Thumb.IsDragging"
									Value="True">
									<Setter
										TargetName="rectangle"
										Property="Background"
										Value="{StaticResource ScrollBar.Pressed.Thumb}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type Thumb}"
				x:Key="ScrollBarThumbHorizontal">
				<Setter
					Property="FrameworkElement.OverridesDefaultStyle"
					Value="True" />
				<Setter
					Property="IsTabStop"
					Value="False" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Thumb}">
							<Border
								Name="rectangle"
								CornerRadius="3"
								Height="{TemplateBinding Height}"
								SnapsToDevicePixels="True"
								Width="{TemplateBinding Width}"
								Background="{StaticResource ScrollBar.Static.Thumb}" />
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="rectangle"
										Property="Background"
										Value="{StaticResource ScrollBar.MouseOver.Thumb}" />
								</Trigger>
								<Trigger
									Property="Thumb.IsDragging"
									Value="True">
									<Setter
										TargetName="rectangle"
										Property="Background"
										Value="{StaticResource ScrollBar.Pressed.Thumb}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type ScrollBar}"
				x:Key="{x:Type ScrollBar}">
				<Setter
					Property="Stylus.IsPressAndHoldEnabled"
					Value="False" />
				<Setter
					Property="Stylus.IsFlicksEnabled"
					Value="False" />
				<Setter
					Property="Background"
					Value="{StaticResource ScrollBar.Static.Background}" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource SystemColors.ControlTextBrushKey}" />
				<Setter
					Property="Width"
					Value="8" />
				<Setter
					Property="MinWidth"
					Value="8" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ScrollBar}">
							<Grid
								Name="Bg"
								SnapsToDevicePixels="True">
								<Grid.RowDefinitions>
									<RowDefinition
										Height="0.00001*" />
								</Grid.RowDefinitions>
								<Border
									Background="{TemplateBinding Background}"
									Grid.Row="0" />
								<Track
									Name="PART_Track"
									IsDirectionReversed="True"
									IsEnabled="{TemplateBinding IsMouseOver}"
									Grid.Row="0">
									<Track.DecreaseRepeatButton>
										<RepeatButton
											Command="{x:Static ScrollBar.PageUpCommand}"
											Style="{StaticResource RepeatButtonTransparent}" />
									</Track.DecreaseRepeatButton>
									<Track.IncreaseRepeatButton>
										<RepeatButton
											Command="{x:Static ScrollBar.PageDownCommand}"
											Style="{StaticResource RepeatButtonTransparent}" />
									</Track.IncreaseRepeatButton>
									<Track.Thumb>
										<Thumb
											Style="{StaticResource ScrollBarThumbVertical}" />
									</Track.Thumb>
								</Track>
							</Grid>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" />
										<Condition
											Value="true"
											Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" />
									</MultiDataTrigger.Conditions>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" />
										<Condition
											Value="true"
											Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" />
									</MultiDataTrigger.Conditions>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" />
										<Condition
											Value="false"
											Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" />
									</MultiDataTrigger.Conditions>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" />
										<Condition
											Value="false"
											Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" />
									</MultiDataTrigger.Conditions>
								</MultiDataTrigger>
								<Trigger
									Property="IsEnabled"
									Value="False" />
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger
						Property="ScrollBar.Orientation"
						Value="Horizontal">
						<Setter
							Property="Width"
							Value="Auto" />
						<Setter
							Property="MinWidth"
							Value="0" />
						<Setter
							Property="Height"
							Value="8" />
						<Setter
							Property="MinHeight"
							Value="8" />
						<Setter
							Property="Template">
							<Setter.Value>
								<ControlTemplate
									TargetType="{x:Type ScrollBar}">
									<Grid
										Name="Bg"
										SnapsToDevicePixels="True">
										<Grid.ColumnDefinitions>
											<ColumnDefinition
												Width="0.00001*" />
										</Grid.ColumnDefinitions>
										<Border
											Background="{TemplateBinding Background}"
											Grid.Column="0" />
										<Track
											Name="PART_Track"
											Grid.Column="0"
											IsEnabled="{TemplateBinding IsMouseOver}">
											<Track.DecreaseRepeatButton>
												<RepeatButton
													Command="{x:Static ScrollBar.PageLeftCommand}"
													Style="{StaticResource RepeatButtonTransparent}" />
											</Track.DecreaseRepeatButton>
											<Track.IncreaseRepeatButton>
												<RepeatButton
													Command="{x:Static ScrollBar.PageRightCommand}"
													Style="{StaticResource RepeatButtonTransparent}" />
											</Track.IncreaseRepeatButton>
											<Track.Thumb>
												<Thumb
													Style="{StaticResource ScrollBarThumbHorizontal}" />
											</Track.Thumb>
										</Track>
									</Grid>
									<ControlTemplate.Triggers>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition
													Value="true"
													Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" />
												<Condition
													Value="true"
													Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" />
											</MultiDataTrigger.Conditions>
										</MultiDataTrigger>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition
													Value="true"
													Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" />
												<Condition
													Value="true"
													Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" />
											</MultiDataTrigger.Conditions>
										</MultiDataTrigger>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition
													Value="true"
													Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" />
												<Condition
													Value="false"
													Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" />
											</MultiDataTrigger.Conditions>
										</MultiDataTrigger>
										<MultiDataTrigger>
											<MultiDataTrigger.Conditions>
												<Condition
													Value="true"
													Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" />
												<Condition
													Value="false"
													Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" />
											</MultiDataTrigger.Conditions>
										</MultiDataTrigger>
										<Trigger
											Property="IsEnabled"
											Value="False" />
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style
				TargetType="{x:Type ScrollViewer}"
				x:Key="{x:Type ScrollViewer}">
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type ScrollViewer}">
							<Grid
								Name="Grid"
								Background="{TemplateBinding Background}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										Width="*" />
									<ColumnDefinition
										Width="Auto" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition
										Height="*" />
									<RowDefinition
										Height="Auto" />
								</Grid.RowDefinitions>
								<Rectangle
									Name="Corner"
									Grid.Column="1"
									Grid.Row="1"
									Fill="{StaticResource ScrollBar.Static.Background}" />
								<ScrollContentPresenter
									Name="PART_ScrollContentPresenter"
									CanContentScroll="{TemplateBinding CanContentScroll}"
									CanHorizontallyScroll="False"
									CanVerticallyScroll="False"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									Content="{TemplateBinding Content}"
									Grid.Column="0"
									Margin="{TemplateBinding Padding}"
									Grid.Row="0" />
								<ScrollBar
									Name="PART_VerticalScrollBar"
									AutomationProperties.AutomationId="VerticalScrollBar"
									Cursor="Arrow"
									Grid.Column="1"
									Maximum="{TemplateBinding ScrollableHeight}"
									Minimum="0"
									Grid.Row="0"
									Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
									ViewportSize="{TemplateBinding ViewportHeight}"
									Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
								<ScrollBar
									Name="PART_HorizontalScrollBar"
									AutomationProperties.AutomationId="HorizontalScrollBar"
									Cursor="Arrow"
									Grid.Column="0"
									Maximum="{TemplateBinding ScrollableWidth}"
									Minimum="0"
									Orientation="Horizontal"
									Grid.Row="1"
									Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
									ViewportSize="{TemplateBinding ViewportWidth}"
									Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type TextBox}"
				BasedOn="{StaticResource {x:Type TextBox}}"
				x:Key="placeHolder">
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type TextBox}">
							<Grid>
								<TextBox
									Name="textSource"
									Foreground="#FFFFFFFF"
									Background="#00FFFFFF"
									Panel.ZIndex="2"
									BorderThickness="0"
									HorizontalContentAlignment="Center"
									VerticalContentAlignment="Center"
									Text="{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}">
									<FrameworkElement.Resources>
										<ResourceDictionary>
											<Style
												TargetType="{x:Type Border}"
												x:Key="{x:Type Border}" />
										</ResourceDictionary>
									</FrameworkElement.Resources>
								</TextBox>
								<TextBox
									Text="{TemplateBinding Tag}"
									Background="{TemplateBinding Background}"
									HorizontalContentAlignment="Center"
									VerticalContentAlignment="Center"
									BorderThickness="0">
									<FrameworkElement.Resources>
										<ResourceDictionary>
											<Style
												TargetType="{x:Type Border}"
												x:Key="{x:Type Border}" />
										</ResourceDictionary>
									</FrameworkElement.Resources>
									<FrameworkElement.Style>
										<Style
											TargetType="{x:Type TextBox}">
											<Setter
												Property="Foreground"
												Value="#00FFFFFF" />
											<Style.Triggers>
												<DataTrigger
													Value=""
													Binding="{Binding Text, Source={x:Reference textSource}}">
													<Setter
														Property="Foreground"
														Value="#FFD3D3D3" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</FrameworkElement.Style>
								</TextBox>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type TextBox}"
				BasedOn="{StaticResource {x:Type TextBox}}"
				x:Key="placeHolderMultiLine">
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type TextBox}">
							<Grid>
								<TextBox
									Name="textSource"
									Foreground="#FFFFFFFF"
									Background="#00FFFFFF"
									Panel.ZIndex="2"
									BorderThickness="0"
									HorizontalContentAlignment="Left"
									VerticalContentAlignment="Center"
									TextWrapping="Wrap"
									AcceptsReturn="True"
									SpellCheck.IsEnabled="True"
									Padding="5,0"
									Text="{Binding Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource TemplatedParent}}">
									<FrameworkElement.Resources>
										<ResourceDictionary>
											<Style
												TargetType="{x:Type Border}"
												x:Key="{x:Type Border}" />
										</ResourceDictionary>
									</FrameworkElement.Resources>
								</TextBox>
								<TextBox
									Text="{TemplateBinding Tag}"
									Background="{TemplateBinding Background}"
									HorizontalContentAlignment="Left"
									VerticalContentAlignment="Center"
									TextWrapping="Wrap"
									AcceptsReturn="True"
									SpellCheck.IsEnabled="True"
									BorderThickness="0"
									Padding="5,0">
									<FrameworkElement.Resources>
										<ResourceDictionary>
											<Style
												TargetType="{x:Type Border}"
												x:Key="{x:Type Border}" />
										</ResourceDictionary>
									</FrameworkElement.Resources>
									<FrameworkElement.Style>
										<Style
											TargetType="{x:Type TextBox}">
											<Setter
												Property="Foreground"
												Value="#00FFFFFF" />
											<Style.Triggers>
												<DataTrigger
													Value=""
													Binding="{Binding Text, Source={x:Reference textSource}}">
													<Setter
														Property="Foreground"
														Value="#FFD3D3D3" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</FrameworkElement.Style>
								</TextBox>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<SolidColorBrush
				Color="#00ffffff"
				x:Key="Button.Static.Background" />
			<SolidColorBrush
				Color="#80969696"
				x:Key="Button.MouseOver.Background" />
			<SolidColorBrush
				Color="#90e62345"
				x:Key="Close.MouseOver.Background" />
			<SolidColorBrush
				Color="#80505050"
				x:Key="Button.Pressed.Background" />
			<SolidColorBrush
				Color="#ff191919"
				x:Key="Button.Disabled.Background" />
			<LinearGradientBrush
				EndPoint="0,1"
				StartPoint="0,0"
				x:Key="TabItem.MouseOver.Background">
				<GradientStop
					Color="#ECF4FC"
					Offset="0.0" />
				<GradientStop
					Color="#DCECFC"
					Offset="1.0" />
			</LinearGradientBrush>
			<SolidColorBrush
				Color="#FFFFFF"
				x:Key="TabItem.Selected.Background" />
			<SolidColorBrush
				Color="#191919"
				x:Key="ListBox.Static.Background" />
			<Style
				TargetType="{x:Type Button}"
				x:Key="CloseButton">
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="Background"
					Value="{StaticResource Button.Static.Background}" />
				<Setter
					Property="Foreground"
					Value="#FFFFFFFF" />
				<Setter
					Property="BorderThickness"
					Value="1" />
				<Setter
					Property="HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Button}">
							<Border
								Name="border"
								Background="{TemplateBinding Background}"
								SnapsToDevicePixels="True"
								CornerRadius="2">
								<ContentPresenter
									Name="contentPresenter"
									Focusable="False"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									Margin="{TemplateBinding Padding}"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="border"
										Property="Background"
										Value="{StaticResource Close.MouseOver.Background}" />
								</Trigger>
								<Trigger
									Property="IsPressed"
									Value="True">
									<Setter
										TargetName="border"
										Property="Background"
										Value="{StaticResource Close.MouseOver.Background}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type Button}"
				x:Key="RoundButton">
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="Background"
					Value="{StaticResource Button.Static.Background}" />
				<Setter
					Property="Foreground"
					Value="#FFFFFFFF" />
				<Setter
					Property="BorderThickness"
					Value="1" />
				<Setter
					Property="HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Padding"
					Value="6 1" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Button}">
							<Border
								Name="border"
								Background="{TemplateBinding Background}"
								SnapsToDevicePixels="True"
								CornerRadius="5">
								<ContentPresenter
									Name="contentPresenter"
									Focusable="False"
									HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
									Margin="{TemplateBinding Padding}"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
									VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="border"
										Property="Background"
										Value="{StaticResource Button.MouseOver.Background}" />
								</Trigger>
								<Trigger
									Property="IsPressed"
									Value="True">
									<Setter
										TargetName="border"
										Property="Background"
										Value="{StaticResource Button.Pressed.Background}" />
								</Trigger>
								<Trigger
									Property="IsEnabled"
									Value="False">
									<Setter
										TargetName="border"
										Property="Background"
										Value="{StaticResource Button.Disabled.Background}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type TabControl}"
				x:Key="Tabs">
				<Setter
					Property="Padding"
					Value="2" />
				<Setter
					Property="HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Background"
					Value="{StaticResource TabItem.Selected.Background}" />
				<Setter
					Property="BorderThickness"
					Value="0" />
				<Setter
					Property="Foreground"
					Value="{DynamicResource SystemColors.ControlTextBrushKey}" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type TabControl}">
							<Grid
								Name="templateRoot"
								ClipToBounds="True"
								SnapsToDevicePixels="True"
								KeyboardNavigation.TabNavigation="Local">
								<Grid.ColumnDefinitions>
									<ColumnDefinition
										Name="ColumnDefinition0" />
									<ColumnDefinition
										Name="ColumnDefinition1"
										Width="0" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition
										Name="RowDefinition0"
										Height="Auto" />
									<RowDefinition
										Name="RowDefinition1"
										Height="*" />
								</Grid.RowDefinitions>
								<ScrollViewer
									Name="TabScrollViewer"
									VerticalScrollBarVisibility="Disabled"
									Background="#00FFFFFF"
									HorizontalScrollBarVisibility="Auto"
									ClipToBounds="True">
									<StackPanel
										Orientation="Horizontal">
										<TabPanel
											Name="headerPanel"
											Background="#00FFFFFF"
											IsItemsHost="True"
											KeyboardNavigation.TabIndex="1"
											ZIndex="1"
											Margin="0 2 0 0" />
										<Button
											Name="AddTabButton"
											Width="15"
											Height="15"
											Margin="4"
											Padding="0"
											Style="{StaticResource RoundButton}">
											<Grid>
												<Path
													Stroke="#FFB9BBBE"
													StrokeThickness="1"
													Data="M0,4.5 L9,4.5" />
												<Path
													Stroke="#FFB9BBBE"
													StrokeThickness="1"
													Data="M4.5,0 L4.5,9" />
											</Grid>
										</Button>
									</StackPanel>
								</ScrollViewer>
								<Border
									Name="contentPanel"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									Background="{TemplateBinding Background}"
									Grid.Column="0"
									KeyboardNavigation.DirectionalNavigation="Contained"
									Grid.Row="1"
									KeyboardNavigation.TabIndex="2"
									KeyboardNavigation.TabNavigation="Local">
									<ContentPresenter
										Name="PART_SelectedContentHost"
										ContentSource="SelectedContent"
										Margin="0,0,0,0"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</Border>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type TabItem}"
				x:Key="Tab">
				<Setter
					Property="FontFamily"
					Value="Segoe UI Variable Display" />
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="Foreground"
					Value="#FFFFFFFF" />
				<Setter
					Property="Background"
					Value="#00ffffff" />
				<Setter
					Property="Margin"
					Value="1" />
				<Setter
					Property="Padding"
					Value="8,6,8,6" />
				<Setter
					Property="HorizontalContentAlignment"
					Value="Stretch" />
				<Setter
					Property="VerticalContentAlignment"
					Value="Stretch" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type TabItem}">
							<Grid
								Name="templateRoot"
								SnapsToDevicePixels="True"
								Background="{x:Null}">
								<Border
									Name="mainBorder"
									BorderBrush="#262626"
									BorderThickness="0,0,0,0"
									Background="#26282828"
									Margin="0,0,3,2"
									CornerRadius="5,5,5,5" />
								<StackPanel
									Orientation="Horizontal">
									<Label
										Content=""
										Width="18"
										Foreground="#DDFFFFFF"
										FontFamily="Segoe MDL2 Assets"
										HorizontalContentAlignment="Right"
										VerticalContentAlignment="Center"
										FontSize="10"
										RenderTransformOrigin="0.5,0.5"
										Padding="0" />
									<ContentPresenter
										Name="contentPresenter"
										ContentSource="Header"
										Focusable="False"
										RecognizesAccessKey="True"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										Margin="5,8,10,8"
										HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
										VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
									<Button
										Name="CloseButton"
										Margin="10,8,8,8"
										Padding="0"
										Height="14"
										Width="14"
										FontSize="8"
										FontFamily="Segoe MDL2 Assets"
										Content=""
										Style="{StaticResource RoundButton}" />
								</StackPanel>
							</Grid>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
									</MultiDataTrigger.Conditions>
									<Setter
										TargetName="mainBorder"
										Property="Background"
										Value="#1f1f1f" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="false"
											Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
										<Condition
											Value="Top"
											Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
									</MultiDataTrigger.Conditions>
									<Setter
										Property="Panel.ZIndex"
										Value="1" />
									<Setter
										TargetName="mainBorder"
										Property="Background"
										Value="#262626" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
										<Condition
											Value="Top"
											Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
									</MultiDataTrigger.Conditions>
									<Setter
										Property="Panel.ZIndex"
										Value="1" />
									<Setter
										TargetName="mainBorder"
										Property="Background"
										Value="#434343" />
								</MultiDataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				TargetType="{x:Type Button}"
				x:Key="ModdedTabButton">
				<Setter
					Property="Background"
					Value="#d82242" />
				<Setter
					Property="Foreground"
					Value="#FFFFFFFF" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type Button}">
							<Border
								CornerRadius="3 3 0 0"
								Background="{TemplateBinding Background}"
								BorderThickness="1">
								<ContentPresenter
									HorizontalAlignment="Center"
									VerticalAlignment="Center" />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger
						Property="UIElement.IsMouseOver"
						Value="True">
						<TriggerBase.EnterActions>
							<BeginStoryboard>
								<Storyboard>
									<ColorAnimation
										To="#404040"
										Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)"
										FillBehavior="HoldEnd"
										Duration="0:0:0.25"
										AutoReverse="False"
										RepeatBehavior="1x" />
								</Storyboard>
							</BeginStoryboard>
						</TriggerBase.EnterActions>
						<TriggerBase.ExitActions>
							<BeginStoryboard>
								<Storyboard>
									<ColorAnimation
										Storyboard.TargetProperty="(Control.Background).(SolidColorBrush.Color)"
										FillBehavior="HoldEnd"
										Duration="0:0:0.25"
										AutoReverse="False"
										RepeatBehavior="1x" />
								</Storyboard>
							</BeginStoryboard>
						</TriggerBase.ExitActions>
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style
				TargetType="{x:Type TextBox}"
				x:Key="InvisibleTextBox">
				<Setter
					Property="Background"
					Value="#00FFFFFF" />
				<Setter
					Property="BorderBrush"
					Value="#00FFFFFF" />
				<Setter
					Property="FrameworkElement.ContextMenu"
					Value="{x:Null}" />
				<Setter
					Property="TextBoxBase.CaretBrush"
					Value="#FFFFFFFF" />
				<Setter
					Property="Foreground"
					Value="#FFFFFFFF" />
				<Setter
					Property="BorderThickness"
					Value="0" />
				<Setter
					Property="KeyboardNavigation.TabNavigation"
					Value="None" />
				<Setter
					Property="HorizontalContentAlignment"
					Value="Left" />
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="UIElement.AllowDrop"
					Value="True" />
				<Setter
					Property="ScrollViewer.PanningMode"
					Value="VerticalFirst" />
				<Setter
					Property="Stylus.IsFlicksEnabled"
					Value="False" />
				<Setter
					Property="Padding"
					Value="0" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type TextBox}">
							<Border
								Name="border"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Background="{TemplateBinding Background}"
								SnapsToDevicePixels="True">
								<ScrollViewer
									Name="PART_ContentHost"
									Focusable="False"
									HorizontalScrollBarVisibility="Hidden"
									VerticalScrollBarVisibility="Hidden" />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition
								Property="TextBoxBase.IsInactiveSelectionHighlightEnabled"
								Value="True" />
							<Condition
								Property="TextBoxBase.IsSelectionActive"
								Value="False" />
						</MultiTrigger.Conditions>
						<Setter
							Property="TextBoxBase.SelectionBrush"
							Value="{DynamicResource SystemColors.InactiveSelectionHighlightBrushKey}" />
					</MultiTrigger>
				</Style.Triggers>
			</Style>
			<Style
				x:Key="FocusVisual">
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle
								Margin="2"
								SnapsToDevicePixels="True"
								Stroke="{DynamicResource SystemColors.ControlTextBrushKey}"
								StrokeThickness="1"
								StrokeDashArray="1 2" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<SolidColorBrush
				Color="#00ffffff"
				x:Key="TabItem.Static.Border" />
			<SolidColorBrush
				Color="#00ffffff"
				x:Key="TabItem.MouseOver.Border" />
			<SolidColorBrush
				Color="#00ffffff"
				x:Key="TabItem.Disabled.Background" />
			<SolidColorBrush
				Color="#00ffffff"
				x:Key="TabItem.Disabled.Border" />
			<SolidColorBrush
				Color="#00ffffff"
				x:Key="TabItem.Selected.Border" />
			<Style
				TargetType="{x:Type TabItem}"
				x:Key="TabItemStyle1">
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{StaticResource FocusVisual}" />
				<Setter
					Property="Foreground"
					Value="#FF000000" />
				<Setter
					Property="Background"
					Value="#00ffffff" />
				<Setter
					Property="BorderBrush"
					Value="#00ffffff" />
				<Setter
					Property="Margin"
					Value="0" />
				<Setter
					Property="Padding"
					Value="0" />
				<Setter
					Property="HorizontalContentAlignment"
					Value="Stretch" />
				<Setter
					Property="VerticalContentAlignment"
					Value="Stretch" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type TabItem}">
							<Grid
								Name="templateRoot"
								SnapsToDevicePixels="True">
								<Border
									Name="mainBorder"
									Margin="0">
									<Border
										Name="innerBorder"
										BorderThickness="0"
										Background="#FF323232"
										Margin="0"
										Opacity="0"
										CornerRadius="2" />
								</Border>
								<ContentPresenter
									Name="contentPresenter"
									ContentSource="Header"
									Focusable="False"
									Margin="0"
									RecognizesAccessKey="True"
									VerticalAlignment="Center"
									HorizontalAlignment="Center" />
							</Grid>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" />
										<Condition
											Value="Top"
											Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
									</MultiDataTrigger.Conditions>
									<Setter
										TargetName="mainBorder"
										Property="Background"
										Value="#00ffffff" />
									<Setter
										TargetName="mainBorder"
										Property="BorderBrush"
										Value="#00ffffff" />
									<Setter
										TargetName="innerBorder"
										Property="BorderThickness"
										Value="0" />
									<Setter
										TargetName="mainBorder"
										Property="BorderThickness"
										Value="0" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="false"
											Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" />
										<Condition
											Value="Top"
											Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
									</MultiDataTrigger.Conditions>
									<Setter
										TargetName="contentPresenter"
										Property="UIElement.Opacity"
										Value="0.56" />
									<Setter
										TargetName="mainBorder"
										Property="Background"
										Value="#00ffffff" />
									<Setter
										TargetName="mainBorder"
										Property="BorderBrush"
										Value="#00ffffff" />
									<Setter
										TargetName="innerBorder"
										Property="BorderThickness"
										Value="0" />
									<Setter
										TargetName="mainBorder"
										Property="BorderThickness"
										Value="0" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="false"
											Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
										<Condition
											Value="Top"
											Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
									</MultiDataTrigger.Conditions>
									<Setter
										TargetName="innerBorder"
										Property="BorderThickness"
										Value="0" />
									<Setter
										TargetName="mainBorder"
										Property="BorderThickness"
										Value="0" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition
											Value="true"
											Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" />
										<Condition
											Value="Top"
											Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" />
									</MultiDataTrigger.Conditions>
									<Setter
										Property="Panel.ZIndex"
										Value="1" />
									<Setter
										Property="Margin"
										Value="-2,-2,-2,0" />
									<Setter
										TargetName="innerBorder"
										Property="UIElement.Opacity"
										Value="1" />
									<Setter
										TargetName="innerBorder"
										Property="BorderThickness"
										Value="0" />
									<Setter
										TargetName="mainBorder"
										Property="BorderThickness"
										Value="0" />
								</MultiDataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</Application.Resources>
</Application>
